diff -rupN org/usr/include/minix/callnr.h sol/usr/include/minix/callnr.h
--- org/usr/include/minix/callnr.h	2014-09-14 11:00:44.000000000 +0200
+++ sol/usr/include/minix/callnr.h	2019-04-25 16:50:32.619062000 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_DISTORT_TIME     (PM_BASE + 48)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupN org/usr/include/unistd.h sol/usr/include/unistd.h
--- org/usr/include/unistd.h	2014-09-14 11:00:43.000000000 +0200
+++ sol/usr/include/unistd.h	2019-04-25 17:12:57.827492000 +0200
@@ -411,5 +411,8 @@ extern	 int optreset;		/* getopt(3) exte
 extern	 char *suboptarg;	/* getsubopt(3) external variable */
 #endif
 
+/* task 1 */
+int distort_time(pid_t pid, uint8_t scale);
+
 __END_DECLS
 #endif /* !_UNISTD_H_ */
diff -rupN org/usr/src/include/unistd.h sol/usr/src/include/unistd.h
--- org/usr/src/include/unistd.h	2014-09-13 23:56:50.000000000 +0200
+++ sol/usr/src/include/unistd.h	2019-04-25 17:12:52.151547000 +0200
@@ -411,5 +411,8 @@ extern	 int optreset;		/* getopt(3) exte
 extern	 char *suboptarg;	/* getsubopt(3) external variable */
 #endif
 
+/* task 1 */
+int distort_time(pid_t pid, uint8_t scale);
+
 __END_DECLS
 #endif /* !_UNISTD_H_ */
diff -rupN org/usr/src/lib/libc/misc/distort_time.c sol/usr/src/lib/libc/misc/distort_time.c
--- org/usr/src/lib/libc/misc/distort_time.c	1970-01-01 01:00:00.000000000 +0100
+++ sol/usr/src/lib/libc/misc/distort_time.c	2019-04-30 14:10:54.050063000 +0200
@@ -0,0 +1,15 @@
+#include <unistd.h>
+#include <lib.h>
+#include <string.h>
+
+int distort_time(pid_t pid, uint8_t scale) {
+    message m;
+
+    memset(&m, 0, sizeof(m));
+    m.m_m1.m1i1 = pid;
+    m.m_m1.m1i2 = scale;
+
+    if (syscall(PM_PROC_NR, PM_DISTORT_TIME, &m) < 0)
+        return errno;
+    return 0;
+}
\ No newline at end of file
diff -rupN org/usr/src/lib/libc/misc/Makefile.inc sol/usr/src/lib/libc/misc/Makefile.inc
--- org/usr/src/lib/libc/misc/Makefile.inc	2014-09-13 23:56:50.000000000 +0200
+++ sol/usr/src/lib/libc/misc/Makefile.inc	2019-04-25 20:10:24.551842000 +0200
@@ -7,4 +7,4 @@
 SRCS+=	initfini.c
 
 # for -fstack-protector
-SRCS+=	stack_protector.c
+SRCS+=	stack_protector.c distort_time.c
diff -rupN org/usr/src/minix/include/minix/callnr.h sol/usr/src/minix/include/minix/callnr.h
--- org/usr/src/minix/include/minix/callnr.h	2014-09-13 23:56:50.000000000 +0200
+++ sol/usr/src/minix/include/minix/callnr.h	2019-04-25 16:49:00.936573000 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_DISTORT_TIME 	(PM_BASE + 48)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupN org/usr/src/minix/servers/pm/distort_time.c sol/usr/src/minix/servers/pm/distort_time.c
--- org/usr/src/minix/servers/pm/distort_time.c	1970-01-01 01:00:00.000000000 +0100
+++ sol/usr/src/minix/servers/pm/distort_time.c	2019-04-30 14:10:04.462624000 +0200
@@ -0,0 +1,69 @@
+#include "pm.h"
+#include "mproc.h"
+#include "stdbool.h"
+
+
+static bool is_current_process(pid_t pid) {
+    return mp->mp_pid == pid;
+}
+
+static bool process_exists(pid_t pid) {
+    return find_proc(pid) != NULL;
+}
+
+static bool is_root(struct mproc *proc) {
+    return mproc[proc->mp_parent].mp_pid == proc->mp_pid;
+}
+
+/** @return true if process a is parent of process b */
+static bool is_parent(struct mproc *proc_a, struct mproc *proc_b) {
+    return proc_a->mp_pid == mproc[proc_b->mp_parent].mp_pid;
+}
+
+/** @return true if process a is an ancestor of process b */
+static bool is_ancestor_rec(struct mproc *proc_a, struct mproc *proc_b) {
+    if (is_root(proc_b))
+        return false;
+    else if (is_parent(proc_a, proc_b))
+        return true;
+    else
+        return is_ancestor_rec(proc_a, &mproc[proc_b->mp_parent]);
+}
+
+/** @return true if process with pid_a is an ancestor of process with pid_b */
+static bool is_ancestor(pid_t pid_a, pid_t pid_b) {
+    return is_ancestor_rec(find_proc(pid_a), find_proc(pid_b));
+}
+
+
+/** @return true if process with pid_a is a descendant of process with pid_b */
+static bool is_descendant(pid_t pid_a, pid_t pid_b) {
+    return is_ancestor(pid_b, pid_a);
+}
+
+static void set_scale(pid_t pid, uint8_t scale, bool is_divisor) {
+    struct mproc *proc = find_proc(pid);
+    proc->mp_distort_scale = scale;
+    proc->is_divisor = is_divisor;
+    if (proc->mp_distort_time_state == NOT_DISTORTED)
+        proc->mp_distort_time_state = REFERENCE_POINT_NOT_SET;
+}
+
+int do_distort_time(void) {
+    pid_t pid = m_in.m_m1.m1i1;
+    uint8_t scale = m_in.m_m1.m1i2;
+
+    if (!process_exists(pid))
+        return EINVAL;
+    if (is_current_process(pid))
+        return EPERM;
+
+    if (is_descendant(mp->mp_pid, pid))
+        set_scale(pid, scale, true);
+    else if (is_ancestor(mp->mp_pid, pid))
+        set_scale(pid, scale, false);
+    else
+        return EPERM;
+
+    return OK;
+}
\ No newline at end of file
diff -rupN org/usr/src/minix/servers/pm/forkexit.c sol/usr/src/minix/servers/pm/forkexit.c
--- org/usr/src/minix/servers/pm/forkexit.c	2014-09-13 23:56:50.000000000 +0200
+++ sol/usr/src/minix/servers/pm/forkexit.c	2019-04-29 13:30:11.563763000 +0200
@@ -105,6 +105,7 @@ int do_fork()
   rmc->mp_child_stime = 0;		/* reset administration */
   rmc->mp_exitstatus = 0;
   rmc->mp_sigstatus = 0;
+  rmc->mp_distort_time_state = NOT_DISTORTED;  /* reset distort time flag */
   rmc->mp_endpoint = child_ep;		/* passed back by VM */
   for (i = 0; i < NR_ITIMERS; i++)
 	rmc->mp_interval[i] = 0;	/* reset timer intervals */
@@ -193,6 +194,7 @@ int do_srv_fork()
   rmc->mp_child_stime = 0;		/* reset administration */
   rmc->mp_exitstatus = 0;
   rmc->mp_sigstatus = 0;
+  rmc->mp_distort_time_state = NOT_DISTORTED;  /* reset distort time flag */
   rmc->mp_endpoint = child_ep;		/* passed back by VM */
   rmc->mp_realuid = m_in.m_lsys_pm_srv_fork.uid;
   rmc->mp_effuid = m_in.m_lsys_pm_srv_fork.uid;
diff -rupN org/usr/src/minix/servers/pm/Makefile sol/usr/src/minix/servers/pm/Makefile
--- org/usr/src/minix/servers/pm/Makefile	2014-09-13 23:56:50.000000000 +0200
+++ sol/usr/src/minix/servers/pm/Makefile	2019-04-25 19:55:33.492497000 +0200
@@ -4,7 +4,7 @@
 PROG=	pm
 SRCS=	main.c forkexit.c exec.c time.c alarm.c \
 	signal.c utility.c table.c trace.c getset.c misc.c \
-	profile.c mcontext.c schedule.c
+	profile.c mcontext.c schedule.c distort_time.c
 
 DPADD+=	${LIBSYS} ${LIBTIMERS}
 LDADD+=	-lsys -ltimers
diff -rupN org/usr/src/minix/servers/pm/mproc.h sol/usr/src/minix/servers/pm/mproc.h
--- org/usr/src/minix/servers/pm/mproc.h	2014-09-13 23:56:50.000000000 +0200
+++ sol/usr/src/minix/servers/pm/mproc.h	2019-04-27 22:27:39.652597000 +0200
@@ -9,6 +9,7 @@
 #include <signal.h>
 
 #include <sys/cdefs.h>
+#include "stdbool.h"
 
 /* Needs to be included here, for 'ps' etc */
 #include "const.h"
@@ -70,6 +71,11 @@ EXTERN struct mproc {
   char mp_name[PROC_NAME_LEN];	/* process name */
 
   int mp_magic;			/* sanity check, MP_MAGIC */
+
+  uint8_t mp_distort_scale;        /* distort_time scale */
+  bool is_divisor;                 /* tells whether distort_time represent number by which time should be divided or multiplied */
+  clock_t mp_realtime_reference_point;   /* reference point for PM_GETTIMEOFDAY - distorted time is calculated since this moment */
+  int mp_distort_time_state;        /* represents current state of distort_time */
 } mproc[NR_PROCS];
 
 /* Flag values */
@@ -91,5 +97,8 @@ EXTERN struct mproc {
 #define TRACE_ZOMBIE	0x10000	/* waiting for tracer to issue WAITPID call */
 #define DELAY_CALL	0x20000	/* waiting for call before sending signal */
 #define TAINTED		0x40000 /* process is 'tainted' */
+#define NOT_DISTORTED  0x00000             /* PM_DISTORT_TIME was never called - normal time returned in any case - DEFAULT state */
+#define REFERENCE_POINT_SET 0x00002     /* next PM_GETTIMEOFDAY will return distorted time */
+#define REFERENCE_POINT_NOT_SET 0x00001 /* next PM_GETTIMEOFDAY will set refrence point and return normal time */
 
 #define MP_MAGIC	0xC0FFEE0
diff -rupN org/usr/src/minix/servers/pm/proto.h sol/usr/src/minix/servers/pm/proto.h
--- org/usr/src/minix/servers/pm/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ sol/usr/src/minix/servers/pm/proto.h	2019-04-25 19:49:05.523994000 +0200
@@ -89,3 +89,6 @@ struct mproc *find_proc(pid_t lpid);
 int nice_to_priority(int nice, unsigned *new_q);
 int pm_isokendpt(int ep, int *proc);
 void tell_vfs(struct mproc *rmp, message *m_ptr);
+
+/* task 1 */
+int do_distort_time(void);
\ No newline at end of file
diff -rupN org/usr/src/minix/servers/pm/table.c sol/usr/src/minix/servers/pm/table.c
--- org/usr/src/minix/servers/pm/table.c	2014-09-13 23:56:50.000000000 +0200
+++ sol/usr/src/minix/servers/pm/table.c	2019-04-25 17:17:36.700813000 +0200
@@ -40,6 +40,7 @@ int (* const call_vec[NR_PM_CALLS])(void
 	CALL(PM_GETPRIORITY)	= do_getsetpriority,	/* getpriority(2) */
 	CALL(PM_SETPRIORITY)	= do_getsetpriority,	/* setpriority(2) */
 	CALL(PM_GETTIMEOFDAY)	= do_time,		/* gettimeofday(2) */
+	CALL(PM_DISTORT_TIME)   = do_distort_time,
 	CALL(PM_SETEUID)	= do_set,		/* geteuid(2) */
 	CALL(PM_SETEGID)	= do_set,		/* setegid(2) */
 	CALL(PM_ISSETUGID)	= do_get,		/* issetugid */
diff -rupN org/usr/src/minix/servers/pm/time.c sol/usr/src/minix/servers/pm/time.c
--- org/usr/src/minix/servers/pm/time.c	2014-09-13 23:56:50.000000000 +0200
+++ sol/usr/src/minix/servers/pm/time.c	2019-04-29 13:11:02.769830000 +0200
@@ -14,6 +14,7 @@
 #include <signal.h>
 #include <sys/time.h>
 #include "mproc.h"
+#include "stdbool.h"
 
 /*===========================================================================*
  *				do_gettime				     *
@@ -65,6 +66,15 @@ int do_getres()
 /*===========================================================================*
  *				do_settime				     *
  *===========================================================================*/
+
+static void reset_reference_points() {
+    register struct mproc *rmp;
+
+    for (rmp = &mproc[0]; rmp < &mproc[NR_PROCS]; rmp++)
+        if (rmp->mp_flags & IN_USE && rmp->mp_distort_time_state == REFERENCE_POINT_SET)
+            rmp->mp_distort_time_state = REFERENCE_POINT_NOT_SET;
+}
+
 int do_settime()
 {
   int s;
@@ -75,8 +85,9 @@ int do_settime()
 
   switch (m_in.m_lc_pm_time.clk_id) {
 	case CLOCK_REALTIME:
-		s = sys_settime(m_in.m_lc_pm_time.now, m_in.m_lc_pm_time.clk_id,
-			m_in.m_lc_pm_time.sec, m_in.m_lc_pm_time.nsec);
+		if ((s = sys_settime(m_in.m_lc_pm_time.now, m_in.m_lc_pm_time.clk_id,
+			m_in.m_lc_pm_time.sec, m_in.m_lc_pm_time.nsec)) == OK)
+		    reset_reference_points();
 		return(s);
 	case CLOCK_MONOTONIC: /* monotonic cannot be changed */
 	default:
@@ -87,24 +98,61 @@ int do_settime()
 /*===========================================================================*
  *				do_time					     *
  *===========================================================================*/
-int do_time()
-{
+
+static bool should_be_distorted() {
+    return mp->mp_distort_time_state == REFERENCE_POINT_SET;
+}
+
+static void set_time_reference_point(clock_t trp) {
+    mp->mp_realtime_reference_point = trp;
+    mp->mp_distort_time_state = REFERENCE_POINT_SET;
+}
+
+
+static time_t calc_distorted_sec(time_t boottime, clock_t realtime) {
+    if (mp->is_divisor && mp->mp_distort_scale != 0)
+        return boottime
+               + mp->mp_realtime_reference_point / system_hz
+               + (realtime - mp->mp_realtime_reference_point) / (mp->mp_distort_scale * system_hz);
+    else
+        return boottime
+               + ((mp->mp_realtime_reference_point
+               + (realtime - mp->mp_realtime_reference_point) * mp->mp_distort_scale)
+               / system_hz);
+}
+
+static long calc_distorted_usec(clock_t realtime) {
+    if (mp->is_divisor && mp->mp_distort_scale != 0)
+        return (uint32_t) ((mp->mp_realtime_reference_point % system_hz) * (1000000000ULL / system_hz)
+        + ((realtime - mp->mp_realtime_reference_point) % (system_hz * mp->mp_distort_scale)) * 1000000000ULL / (system_hz * mp->mp_distort_scale));
+    else
+        return (uint32_t) ((mp->mp_realtime_reference_point + (realtime - mp->mp_realtime_reference_point) * mp->mp_distort_scale) % system_hz) * 1000000000ULL / system_hz;
+}
+
+
+int do_time() {
 /* Perform the time(tp) system call. This returns the time in seconds since 
  * 1.1.1970.  MINIX is an astrophysically naive system that assumes the earth 
  * rotates at a constant rate and that such things as leap seconds do not 
  * exist.
  */
-  clock_t ticks, realtime;
-  time_t boottime;
-  int s;
+    clock_t ticks, realtime;
+    time_t boottime;
+    int s;
+    if ((s = getuptime(&ticks, &realtime, &boottime)) != OK)
+        panic("do_time couldn't get uptime: %d", s);
+
+    if (should_be_distorted()) {
+        mp->mp_reply.m_pm_lc_time.sec = calc_distorted_sec(boottime, realtime);
+        mp->mp_reply.m_pm_lc_time.nsec = calc_distorted_usec(realtime);
+    } else {
+        if (mp->mp_distort_time_state == REFERENCE_POINT_NOT_SET)
+            set_time_reference_point(realtime);
+        mp->mp_reply.m_pm_lc_time.sec = boottime + (realtime / system_hz);
+        mp->mp_reply.m_pm_lc_time.nsec  = (uint32_t) ((realtime % system_hz) * 1000000000ULL / system_hz);
+    }
 
-  if ( (s=getuptime(&ticks, &realtime, &boottime)) != OK)
-  	panic("do_time couldn't get uptime: %d", s);
-
-  mp->mp_reply.m_pm_lc_time.sec = boottime + (realtime / system_hz);
-  mp->mp_reply.m_pm_lc_time.nsec =
-	(uint32_t) ((realtime % system_hz) * 1000000000ULL / system_hz);
-  return(OK);
+    return (OK);
 }
 
 /*===========================================================================*
